1.正则表达式的定义
正则表达式是对字符串的一种操作，就是用事先定义好的一些特定字符、及这些特定字符的组合、
组成一个”规则字符串“，这个”规则字符串“用来表达对字符串的一个过滤逻辑。
10000~12数字组合
09876536
1.长度
2.是否是0开头

正则表达式是对字符串（包括普通字符，例如：a到z之间的字母）和特殊字符（称为“元字符”）操作的一种
逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则的字符串”，这个规则
的字符串用来表达对字符串的一种过滤逻辑，正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。

2.正则表达式的作用和特点
给定一个正则表达式和另一个字符串，我们可以达到如下的目的：
1.给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）
2.可以通过正则表达式，从字符串中获取我们想要的特定部分

正则表达式的特点是：
1.灵活性、逻辑性和功能性非常强
2.可以迅速地用极简单的方式达到了字符串的复杂控制
3.对于刚接触的人来说，比较晦涩难懂

场景：
如何判断一个字符串是手机号呢？
判断邮箱为163或者126的所有邮件地址
譬如你在写一个爬虫，你得到了一个网页的HTML源码，其中有一段、

\A：表示从字符串的开始处匹配
\Z：表示从字符串的结束处匹配，如果存在换行，只匹配到换行前的结束字符串。
\b：匹配一个单词边界，也就是指单词和空格之间的位置。
\B：匹配非单词边界。
\d：匹配任意数字，等价于[0-9]       digit
\D：匹配任意非数字字符，等价于[^\d]  not digit
\s：匹配任意空白字符，等价于[\t\n\r\f]   space
\S：匹配任意非空白字符，等价于[^\s] not space
\w：匹配任意字母数字及下划线，等价于[a-zA-Z0-9_]
\W：匹配任意非字母数字及下划线，等价于[^\w]
\\：匹配原义的反斜杠\

’.‘用于匹配除换行符（\n）之外的所有字符
'^'用于匹配字符串的开始，即行首
'$'用于匹配字符串的末尾(末尾如果有换行符\n，就匹配\n前面的那个字符)，即行尾

定义正则验证次数：
    ’*‘用于将前面的模式匹配0次或多次（贪婪模式，即可能多的匹配） >= 0
    ’+‘用于将前面的模式匹配1次或多次（贪婪模式） >= 1
    ’?‘用于将前面的模式匹配0次或1次（贪婪模式）  0， 1
    {m} 用于验证前面的模式匹配m次
    {m,}用于验证前面的模式匹配m次或者多次  >= m次
    ’{m, n}‘用于验证前面的模式匹配m次到n次，即最小匹配m次，最大匹配n次 >= m and <=n 次

    ’*？，+？，？？‘即上面三种特殊字符的非贪婪模式（尽可能少的匹配）
    ’{m, n}‘即上面’{m, n}‘的非贪婪版本



python  re模块：











